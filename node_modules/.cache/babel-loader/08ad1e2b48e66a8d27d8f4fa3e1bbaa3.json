{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoxudong/Documents/GitHub/react_app_t/src/Comment.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Comment extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timeString: ''\n    };\n  }\n\n  componentWillMount() {\n    // let that = this;\n    this._updateTimeString();\n\n    this._timer = setInterval(this._updateTimeString.bind(this), 500000); // this._timer = setInterval(() => {\n    //   that._updateTimeString()\n    //   console.log(1)\n    // }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._timer);\n  }\n\n  handleDeleteComment(event) {\n    if (this.props.onDeleteComment) {\n      this.props.onDeleteComment(this.props.index);\n    }\n  }\n\n  _updateTimeString() {\n    const comment = this.props.comment;\n    const duration = (+Date.now() - comment.time) / 1000;\n    this.setState({\n      timeString: duration > 60 ? \"\".concat(Math.round(duration / 60), \" \\u5206\\u949F\\u524D\") : \"\".concat(Math.round(Math.max(duration, 1)), \" \\u79D2\\u524D\")\n    });\n  }\n\n  _getProcessedContent(content) {\n    return content.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\").replace(/`([\\S\\s]+?)`/g, '<code>$1</code>');\n  }\n\n  render() {\n    const comment = this.props.comment.content.comment;\n    console.log(this.props.comment);\n    return React.createElement(\"div\", {\n      className: \"comment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"comment-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.comment.username, \" \"), \"\\uFF1A\"), React.createElement(\"p\", {\n      className: \"content-box\",\n      dangerouslySetInnerHTML: {\n        __html: this._getProcessedContent(comment.content)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"creat-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.timeString), React.createElement(\"div\", {\n      className: \"delete-btn\",\n      onClick: this.handleDeleteComment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"\\u5220\\u9664\"));\n  }\n\n}\n\nComment.propTypes = {\n  comment: PropTypes.object.isRequired\n};\nexport default Comment;","map":{"version":3,"sources":["/Users/xiaoxudong/Documents/GitHub/react_app_t/src/Comment.js"],"names":["React","Component","PropTypes","Comment","constructor","state","timeString","componentWillMount","_updateTimeString","_timer","setInterval","bind","componentWillUnmount","clearInterval","handleDeleteComment","event","props","onDeleteComment","index","comment","duration","Date","now","time","setState","Math","round","max","_getProcessedContent","content","replace","render","console","log","username","__html","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Comment extends Component {\n  static propTypes = {\n    comment: PropTypes.object.isRequired\n  }\n\n  constructor() {\n    super()\n    this.state = { timeString: '' }\n  }\n\n  componentWillMount() {\n    // let that = this;\n    this._updateTimeString()\n    this._timer = setInterval(\n      this._updateTimeString.bind(this)\n      , 500000)\n    // this._timer = setInterval(() => {\n    //   that._updateTimeString()\n    //   console.log(1)\n    // }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._timer)\n  }\n\n  handleDeleteComment(event) {\n    if (this.props.onDeleteComment) {\n      this.props.onDeleteComment(this.props.index)\n    }\n  }\n\n  _updateTimeString() {\n    const comment = this.props.comment\n    const duration = (+Date.now() - comment.time) / 1000;\n    this.setState({\n      timeString: duration > 60\n        ? `${Math.round(duration / 60)} 分钟前`\n        : `${Math.round(Math.max(duration, 1))} 秒前`\n    })\n  }\n\n  _getProcessedContent(content) {\n    return content\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\")\n      .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\n  }\n\n\n  render() {\n    const { comment } = this.props.comment.content;\n    console.log(this.props.comment)\n    return (\n      <div className='comment'>\n        <div className='comment-user'>\n          <span>{this.props.comment.username} </span>：\n        </div>\n        <p className='content-box' dangerouslySetInnerHTML={{ __html: this._getProcessedContent(comment.content) }}></p>\n        <p className='creat-time'>{this.state.timeString}</p>\n        <div className='delete-btn' onClick={this.handleDeleteComment.bind(this)}>删除</div>\n      </div>\n    )\n  }\n}\n\nexport default Comment"]},"metadata":{},"sourceType":"module"}